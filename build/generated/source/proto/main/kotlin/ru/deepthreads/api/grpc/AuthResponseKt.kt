//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: auth_service.proto

package ru.deepthreads.api.grpc;

@kotlin.jvm.JvmName("-initializeauthResponse")
inline fun authResponse(block: ru.deepthreads.api.grpc.AuthResponseKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse =
  ru.deepthreads.api.grpc.AuthResponseKt.Dsl._create(ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse.newBuilder()).apply { block() }._build()
object AuthResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse = _builder.build()

    /**
     * <code>.ru.deepthreads.api.grpc.MUserProfile user_profile = 1;</code>
     */
    var userProfile: ru.deepthreads.api.grpc.Users.MUserProfile
      @JvmName("getUserProfile")
      get() = _builder.getUserProfile()
      @JvmName("setUserProfile")
      set(value) {
        _builder.setUserProfile(value)
      }
    /**
     * <code>.ru.deepthreads.api.grpc.MUserProfile user_profile = 1;</code>
     */
    fun clearUserProfile() {
      _builder.clearUserProfile()
    }
    /**
     * <code>.ru.deepthreads.api.grpc.MUserProfile user_profile = 1;</code>
     * @return Whether the userProfile field is set.
     */
    fun hasUserProfile(): kotlin.Boolean {
      return _builder.hasUserProfile()
    }

    /**
     * <code>.ru.deepthreads.api.grpc.MAccount account = 2;</code>
     */
    var account: ru.deepthreads.api.grpc.Users.MAccount
      @JvmName("getAccount")
      get() = _builder.getAccount()
      @JvmName("setAccount")
      set(value) {
        _builder.setAccount(value)
      }
    /**
     * <code>.ru.deepthreads.api.grpc.MAccount account = 2;</code>
     */
    fun clearAccount() {
      _builder.clearAccount()
    }
    /**
     * <code>.ru.deepthreads.api.grpc.MAccount account = 2;</code>
     * @return Whether the account field is set.
     */
    fun hasAccount(): kotlin.Boolean {
      return _builder.hasAccount()
    }

    /**
     * <code>string auth_token = 3;</code>
     */
    var authToken: kotlin.String
      @JvmName("getAuthToken")
      get() = _builder.getAuthToken()
      @JvmName("setAuthToken")
      set(value) {
        _builder.setAuthToken(value)
      }
    /**
     * <code>string auth_token = 3;</code>
     */
    fun clearAuthToken() {
      _builder.clearAuthToken()
    }

    /**
     * <code>string refresh_token = 4;</code>
     */
    var refreshToken: kotlin.String
      @JvmName("getRefreshToken")
      get() = _builder.getRefreshToken()
      @JvmName("setRefreshToken")
      set(value) {
        _builder.setRefreshToken(value)
      }
    /**
     * <code>string refresh_token = 4;</code>
     */
    fun clearRefreshToken() {
      _builder.clearRefreshToken()
    }

    /**
     * <code>int64 auth_token_lifetime = 5;</code>
     */
    var authTokenLifetime: kotlin.Long
      @JvmName("getAuthTokenLifetime")
      get() = _builder.getAuthTokenLifetime()
      @JvmName("setAuthTokenLifetime")
      set(value) {
        _builder.setAuthTokenLifetime(value)
      }
    /**
     * <code>int64 auth_token_lifetime = 5;</code>
     */
    fun clearAuthTokenLifetime() {
      _builder.clearAuthTokenLifetime()
    }

    /**
     * <code>int64 refresh_token_lifetime = 6;</code>
     */
    var refreshTokenLifetime: kotlin.Long
      @JvmName("getRefreshTokenLifetime")
      get() = _builder.getRefreshTokenLifetime()
      @JvmName("setRefreshTokenLifetime")
      set(value) {
        _builder.setRefreshTokenLifetime(value)
      }
    /**
     * <code>int64 refresh_token_lifetime = 6;</code>
     */
    fun clearRefreshTokenLifetime() {
      _builder.clearRefreshTokenLifetime()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse.copy(block: ru.deepthreads.api.grpc.AuthResponseKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponse =
  ru.deepthreads.api.grpc.AuthResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponseOrBuilder.userProfileOrNull: ru.deepthreads.api.grpc.Users.MUserProfile?
  get() = if (hasUserProfile()) getUserProfile() else null

val ru.deepthreads.api.grpc.AuthServiceOuterClass.AuthResponseOrBuilder.accountOrNull: ru.deepthreads.api.grpc.Users.MAccount?
  get() = if (hasAccount()) getAccount() else null

