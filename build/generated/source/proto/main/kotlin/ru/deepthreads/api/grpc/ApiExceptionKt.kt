//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: errors.proto

package ru.deepthreads.api.grpc;

@kotlin.jvm.JvmName("-initializeapiException")
inline fun apiException(block: ru.deepthreads.api.grpc.ApiExceptionKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.Errors.ApiException =
  ru.deepthreads.api.grpc.ApiExceptionKt.Dsl._create(ru.deepthreads.api.grpc.Errors.ApiException.newBuilder()).apply { block() }._build()
object ApiExceptionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: ru.deepthreads.api.grpc.Errors.ApiException.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.deepthreads.api.grpc.Errors.ApiException.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.deepthreads.api.grpc.Errors.ApiException = _builder.build()

    /**
     * <code>int32 api_code = 1;</code>
     */
    var apiCode: kotlin.Int
      @JvmName("getApiCode")
      get() = _builder.getApiCode()
      @JvmName("setApiCode")
      set(value) {
        _builder.setApiCode(value)
      }
    /**
     * <code>int32 api_code = 1;</code>
     */
    fun clearApiCode() {
      _builder.clearApiCode()
    }

    /**
     * <code>string api_message = 2;</code>
     */
    var apiMessage: kotlin.String
      @JvmName("getApiMessage")
      get() = _builder.getApiMessage()
      @JvmName("setApiMessage")
      set(value) {
        _builder.setApiMessage(value)
      }
    /**
     * <code>string api_message = 2;</code>
     */
    fun clearApiMessage() {
      _builder.clearApiMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.deepthreads.api.grpc.Errors.ApiException.copy(block: ru.deepthreads.api.grpc.ApiExceptionKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.Errors.ApiException =
  ru.deepthreads.api.grpc.ApiExceptionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

