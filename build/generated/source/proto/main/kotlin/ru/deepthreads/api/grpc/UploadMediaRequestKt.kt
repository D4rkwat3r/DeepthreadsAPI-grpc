//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: media_service.proto

package ru.deepthreads.api.grpc;

@kotlin.jvm.JvmName("-initializeuploadMediaRequest")
inline fun uploadMediaRequest(block: ru.deepthreads.api.grpc.UploadMediaRequestKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest =
  ru.deepthreads.api.grpc.UploadMediaRequestKt.Dsl._create(ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest.newBuilder()).apply { block() }._build()
object UploadMediaRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>string type = 2;</code>
     */
    var type: kotlin.String
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>string type = 2;</code>
     */
    fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>bytes media = 3;</code>
     */
    var media: com.google.protobuf.ByteString
      @JvmName("getMedia")
      get() = _builder.getMedia()
      @JvmName("setMedia")
      set(value) {
        _builder.setMedia(value)
      }
    /**
     * <code>bytes media = 3;</code>
     */
    fun clearMedia() {
      _builder.clearMedia()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest.copy(block: ru.deepthreads.api.grpc.UploadMediaRequestKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.MediaServiceOuterClass.UploadMediaRequest =
  ru.deepthreads.api.grpc.UploadMediaRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

