//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: users.proto

package ru.deepthreads.api.grpc;

@kotlin.jvm.JvmName("-initializemAccount")
inline fun mAccount(block: ru.deepthreads.api.grpc.MAccountKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.Users.MAccount =
  ru.deepthreads.api.grpc.MAccountKt.Dsl._create(ru.deepthreads.api.grpc.Users.MAccount.newBuilder()).apply { block() }._build()
object MAccountKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: ru.deepthreads.api.grpc.Users.MAccount.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.deepthreads.api.grpc.Users.MAccount.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.deepthreads.api.grpc.Users.MAccount = _builder.build()

    /**
     * <code>bool verified = 1;</code>
     */
    var verified: kotlin.Boolean
      @JvmName("getVerified")
      get() = _builder.getVerified()
      @JvmName("setVerified")
      set(value) {
        _builder.setVerified(value)
      }
    /**
     * <code>bool verified = 1;</code>
     */
    fun clearVerified() {
      _builder.clearVerified()
    }

    /**
     * <code>bool deep_id_editable = 2;</code>
     */
    var deepIdEditable: kotlin.Boolean
      @JvmName("getDeepIdEditable")
      get() = _builder.getDeepIdEditable()
      @JvmName("setDeepIdEditable")
      set(value) {
        _builder.setDeepIdEditable(value)
      }
    /**
     * <code>bool deep_id_editable = 2;</code>
     */
    fun clearDeepIdEditable() {
      _builder.clearDeepIdEditable()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.deepthreads.api.grpc.Users.MAccount.copy(block: ru.deepthreads.api.grpc.MAccountKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.Users.MAccount =
  ru.deepthreads.api.grpc.MAccountKt.Dsl._create(this.toBuilder()).apply { block() }._build()

