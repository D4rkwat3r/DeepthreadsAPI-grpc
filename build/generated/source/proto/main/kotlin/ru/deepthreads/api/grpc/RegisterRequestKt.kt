//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: auth_service.proto

package ru.deepthreads.api.grpc;

@kotlin.jvm.JvmName("-initializeregisterRequest")
inline fun registerRequest(block: ru.deepthreads.api.grpc.RegisterRequestKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest =
  ru.deepthreads.api.grpc.RegisterRequestKt.Dsl._create(ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest.newBuilder()).apply { block() }._build()
object RegisterRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest = _builder.build()

    /**
     * <code>string nickname = 1;</code>
     */
    var nickname: kotlin.String
      @JvmName("getNickname")
      get() = _builder.getNickname()
      @JvmName("setNickname")
      set(value) {
        _builder.setNickname(value)
      }
    /**
     * <code>string nickname = 1;</code>
     */
    fun clearNickname() {
      _builder.clearNickname()
    }

    /**
     * <code>string deep_id = 2;</code>
     */
    var deepId: kotlin.String
      @JvmName("getDeepId")
      get() = _builder.getDeepId()
      @JvmName("setDeepId")
      set(value) {
        _builder.setDeepId(value)
      }
    /**
     * <code>string deep_id = 2;</code>
     */
    fun clearDeepId() {
      _builder.clearDeepId()
    }

    /**
     * <code>optional string avatar_resource = 4;</code>
     */
    var avatarResource: kotlin.String
      @JvmName("getAvatarResource")
      get() = _builder.getAvatarResource()
      @JvmName("setAvatarResource")
      set(value) {
        _builder.setAvatarResource(value)
      }
    /**
     * <code>optional string avatar_resource = 4;</code>
     */
    fun clearAvatarResource() {
      _builder.clearAvatarResource()
    }
    /**
     * <code>optional string avatar_resource = 4;</code>
     * @return Whether the avatarResource field is set.
     */
    fun hasAvatarResource(): kotlin.Boolean {
      return _builder.hasAvatarResource()
    }

    /**
     * <code>string password = 3;</code>
     */
    var password: kotlin.String
      @JvmName("getPassword")
      get() = _builder.getPassword()
      @JvmName("setPassword")
      set(value) {
        _builder.setPassword(value)
      }
    /**
     * <code>string password = 3;</code>
     */
    fun clearPassword() {
      _builder.clearPassword()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest.copy(block: ru.deepthreads.api.grpc.RegisterRequestKt.Dsl.() -> kotlin.Unit): ru.deepthreads.api.grpc.AuthServiceOuterClass.RegisterRequest =
  ru.deepthreads.api.grpc.RegisterRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

